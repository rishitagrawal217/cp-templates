#include <bits/stdc++.h>
using namespace std;
#define int long long
#define RishitAgrawal ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define vi vector<int>
#define vvi vector<vector<int>>
#define vpii vector<pair<int,int>>
#define pb push_back
using i128  = __int128_t;
#define rep(i,a,b) for(int i=a; i<b; i++)
#define pyes cout<<"YES"<<endl;
#define pno cout<<"NO"<<endl;
#define pda cout<<"DA"<<endl;
#define pnet cout<<"NET"<<endl;
#define ld long double
#define takeinput int n; cin >> n; vi a(n); for(int i =0;i<n; i++) cin >> a[i];
#define sumall accumulate(a.begin(), a.end(), 0LL);
#define maxel *max_element(a.begin(), a.end());
#define minel *min_element(a.begin(), a.end());
#define printans cout<<ans<<endl;
#define printmatrix(a,n,m) for(int i = 0; i < n; i++){for(int j = 0; j < m; j++){cout << a[i][j] << " ";} cout << "\n";}
const int mod = 1e9+7;   
const int MAXN = 1000005;   
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
int lcm(int a, int b) {
    return a / gcd(a, b) * b;
}
inline int binExpo(int a, int b){
    int res=1;
    while(b){
        if(b&1) res=(res*a)%mod;
        a=(a*a)%mod;
        b>>=1;
    }
    return res;
}
inline int invmod(int a, int m=mod){ return binExpo(a, m-2); }
inline int modMul(int a, int b, int m=mod){ return (a%m)*(b%m)%m; }
vector<int> fact(MAXN), invFact(MAXN);
void preCompute(){
    fact[0] = invFact[0] = 1;
    for(int i=1; i<MAXN; i++){
        fact[i] = modMul(fact[i-1], i);
        invFact[i] = binExpo(fact[i], mod-2);
    }
}
#define nCr(n,r) ((r>n||r<0)?0:modMul(modMul(fact[n],invFact[r]),invFact[n-r]))
vi isPrime, spf, inv; 
void sieve(int n){isPrime.assign(n+1,1);isPrime[0]=isPrime[1]=0;rep(i,2,n+1)if(isPrime[i])for(int j=2*i;j<=n;j+=i)isPrime[j]=0;}
void sieveSPF(int n){spf.assign(n+1,0);rep(i,2,n+1)if(!spf[i])for(int j=i;j<=n;j+=i)if(!spf[j])spf[j]=i;}
vi getPrimeFactors(int x){vi res;while(x>1){res.pb(spf[x]);x/=spf[x];}return res;}
vi getDivisors(int n){vi d;for(int i=1;i*i<=n;i++)if(n%i==0){d.pb(i);if(i!=n/i)d.pb(n/i);}sort(d.begin(),d.end());return d;}
int phi(int n){int r=n;for(int i=2;i*i<=n;i++)if(n%i==0){while(n%i==0)n/=i;r-=r/i;}if(n>1)r-=r/n;return r;}
void precomputeInv(int n){inv.assign(n+1,1);rep(i,2,n+1)inv[i]=mod-(mod/i)*inv[mod%i]%mod;}
class DSU {
    vi par, sz;
public:
    DSU(int n): par(n), sz(n,1) { iota(par.begin(), par.end(),0); }
    int find(int u) { return par[u]==u ? u : par[u]=find(par[u]); }
    bool unite(int u, int v) { if((u=find(u)) == (v=find(v))) return 0; if(sz[u] < sz[v]) swap(u,v); par[v]=u; sz[u]+=sz[v]; return 1; }
};
 
class Graph {
public:
    int n; vector<vector<int>> adj; vector<bool> vis; vector<int> depth, parent;
    Graph(int _n):n(_n),adj(_n),vis(_n),depth(_n),parent(_n,-1){}
    void addEdge(int u,int v,bool dir=0){adj[u].push_back(v);if(!dir)adj[v].push_back(u);}
    void resetVisited(){fill(vis.begin(),vis.end(),0);fill(parent.begin(),parent.end(),-1);fill(depth.begin(),depth.end(),0);}
    void dfs(int u,int d=0){vis[u]=1;depth[u]=d;for(int v:adj[u])if(!vis[v])parent[v]=u,dfs(v,d+1);}
    void bfs(int s){queue<int> q;vis[s]=1;parent[s]=-1;q.push(s);while(!q.empty()){int u=q.front();q.pop();for(int v:adj[u])if(!vis[v])vis[v]=1,parent[v]=u,q.push(v);}}
    vector<int> shortestPath(int s,int d){resetVisited();bfs(s);if(!vis[d])return {};vector<int> p;for(int v=d;v!=-1;v=parent[v])p.push_back(v);reverse(p.begin(),p.end());return p;}
    bool dfsCycleUndirected(int u,int p){vis[u]=1;for(int v:adj[u]){if(!vis[v]){if(dfsCycleUndirected(v,u))return 1;}else if(v!=p)return 1;}return 0;}
    bool isCyclicUndirected(){resetVisited();for(int i=0;i<n;i++)if(!vis[i]&&dfsCycleUndirected(i,-1))return 1;return 0;}
    bool isCyclicDirected(){vector<int> in(n);for(int u=0;u<n;u++)for(int v:adj[u])in[v]++;queue<int> q;for(int i=0;i<n;i++)if(!in[i])q.push(i);int cnt=0;while(!q.empty()){int u=q.front();q.pop();cnt++;for(int v:adj[u])if(--in[v]==0)q.push(v);}return cnt!=n;}
    vector<int> topologicalSort(){vector<int> in(n),res;for(int u=0;u<n;u++)for(int v:adj[u])in[v]++;queue<int> q;for(int i=0;i<n;i++)if(!in[i])q.push(i);while(!q.empty()){int u=q.front();q.pop();res.push_back(u);for(int v:adj[u])if(--in[v]==0)q.push(v);}return res;}
    vector<int> dijkstra(int s){const int INF=1e18;vector<int> d(n,INF);d[s]=0;priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0,s});while(!pq.empty()){auto [dist,u]=pq.top();pq.pop();if(dist>d[u])continue;for(int v:adj[u])if(d[v]>d[u]+1)d[v]=d[u]+1,pq.push({d[v],v});}return d;}
    int kruskal(vector<tuple<int,int,int>>& edges){ sort(edges.begin(), edges.end()); DSU dsu(n); int mst_weight = 0; for(auto [w, u, v] : edges){ if(dsu.unite(u, v)) mst_weight += w;} return mst_weight;
}
 
};
class SegmentTree {
    int n; vector<int> t;
    void build(const vector<int>& a,int v,int l,int r){if(l==r)t[v]=a[l];else{int m=(l+r)/2;build(a,2*v,l,m);build(a,2*v+1,m+1,r);t[v]=t[2*v]+t[2*v+1];}}
    void update(int v,int l,int r,int pos,int val){if(l==r)t[v]=val;else{int m=(l+r)/2;(pos<=m?update(2*v,l,m,pos,val):update(2*v+1,m+1,r,pos,val));t[v]=t[2*v]+t[2*v+1];}}
    int query(int v,int l,int r,int ql,int qr){if(ql>qr)return 0;if(ql==l&&qr==r)return t[v];int m=(l+r)/2;return query(2*v,l,m,ql,min(qr,m))+query(2*v+1,m+1,r,max(ql,m+1),qr);}
public:
    SegmentTree(const vector<int>& a):n(a.size()),t(4*n){build(a,1,0,n-1);}
    void update(int pos,int val){update(1,0,n-1,pos,val);}
    int query(int l,int r){return query(1,0,n-1,l,r);}
};
class FenwickTree {
    int n; vector<int> bit;
public:
    FenwickTree(int _n):n(_n+1),bit(n){}
    void update(int i,int v){for(++i;i<n;i+=i&-i)bit[i]+=v;}
    int query(int i){int r=0;for(++i;i;i-=i&-i)r+=bit[i];return r;}
    int rangeQuery(int l,int r){return query(r)-query(l-1);}
};
int mex(const vi &a) {
    unordered_set<int> s;
    for (int j = 0; j < a.size(); ++j) {
        s.insert(a[j]);
    }
    int m = 0;
    while (s.count(m)) m++;
    return m;
}
void solve(){
    
}
signed main() {
    RishitAgrawal;
    int t; cin >> t;
    //int t=1;
    //preCompute();
    while(t--) solve();
    return 0;
}
